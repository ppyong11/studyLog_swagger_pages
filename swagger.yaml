---
openapi: 3.0.1
info:
  title: Study Log API Document
  description: This is Study Log API Document
servers:
- url: http://3.106.136.131:8080
  description: Generated server url
tags:
- name: Lap
  description: Lap API, 모든 요청 access token 필요
- name: User-auth
  description: JWT 관련 API, 로그인 제외 모든 요청 access token 필요
- name: Timer
  description: Timer API, 모든 요청 access token 필요
- name: Notification
  description: 알림 관련 API, 모든 요청 access token 필요
- name: Board
  description: Board API, 모든 요청 access token 필요
- name: File
  description: File API, 모든 요청 access token 필요
- name: User
  description: User API, 일부 요청 access token 필요
- name: Category
  description: Category API, 모든 요청 access token 필요
- name: Plan
  description: Plan API, 모든 요청 access token 필요
- name: Main
  description: 메인화면 API, 모든 요청 access token 필요
- name: SSE
  description: SSE API, 모든 요청 access token 필요
paths:
  "/api/timers":
    post:
      tags:
      - Timer
      summary: 타이머 등록
      description: 카테고리 필수, 계획 선택 / 계획 입력 시 계획의 카테고리와 동일해야 함
      operationId: createTimer
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TimerRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/laps":
    post:
      tags:
      - Lap
      summary: 랩 등록
      operationId: createLap
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LapRequest"
        required: true
      responses:
        '200':
          description: 랩 등록 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LapResponse"
        '400':
          description: 랩 등록 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 종료 타이머에 생성 시- 종료된 타이머는 랩 생성이 불가합니다. / 동일 랩명 지정- 해당 랩명이
                    존재합니다.
        '404':
          description: 랩 등록 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 존재하지 않는 타이머입니다.
  "/api/signin":
    post:
      tags:
      - User
      summary: 회원가입
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SignInRequest"
        required: true
      responses:
        '200':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: 회원가입 되었습니다.
        '400':
          description: 회원가입 실패 (중복 아이디/닉네임/이메일, 인증 만료된 이메일)
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 이미 가입된 회원입니다. / 인증 세션이 만료됐거나 인증된 메일이 아닙니다.
  "/api/signin/verify-email-code":
    post:
      tags:
      - User
      summary: 이메일 인증 코드 검증
      operationId: verifyCode
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MailRequest"
        required: true
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: 이메일이 인증되었습니다.
        '400':
          description: 이메일 유효성 검증 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 인증 코드를 입력하세요. / 인증 코드가 만료되었습니다. / 인증 코드가 일치하지 않습니다.
  "/api/signin/send-email-code":
    post:
      tags:
      - User
      summary: 이메일 인증 코드 발송
      operationId: sendEmailCode
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MailRequest"
        required: true
      responses:
        '200':
          description: 이메일 코드 발송 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: 사용 가능한 이메일입니다. 이메일 발송 완료
        '400':
          description: 중복 이메일
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 이미 사용 중인 이메일입니다.
  "/api/refresh":
    post:
      tags:
      - User-auth
      summary: 액세스 토큰 재발급
      operationId: refreshAccessToken
      parameters:
      - name: access_token
        in: cookie
        required: false
        schema:
          type: string
      - name: refresh_token
        in: cookie
        required: false
        schema:
          type: string
      responses:
        '200':
          description: 토큰 재발급 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: 로그인이 연장되었습니다.
        '401':
          description: 토큰 검증 실패로 인한 재발급 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 액세스 토큰 X- 로그인이 필요한 요청입니다. / 리프레시 토큰 X- 재발급 검증에 필요한 토큰이
                    없습니다. / 블랙리스트 처리된 리프레시 토큰- 유효하지 않은 토큰입니다.
      security:
      - bearerAuth: []
  "/api/plans":
    post:
      tags:
      - Plan
      summary: 계획 등록
      operationId: setPlan
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PlanRequest"
        required: true
      responses:
        '200':
          description: 계획 등록 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: 계획이 저장되었습니다.
        '404':
          description: 계획 등록 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 없는 카테고리 지정- 존재하지 않는 카테고리입니다.
  "/api/member/withdraw":
    post:
      tags:
      - User-auth
      summary: 회원탈퇴 (softDelete - 7일간 회원 정보 보관)
      operationId: withdraw
      parameters:
      - name: access_token
        in: cookie
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 회원탈퇴 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: 회원탈퇴 처리되었습니다.
        '400':
          description: 타이머로 인한 회원탈퇴 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 실행 중인 타이머를 종료한 후 다시 시도해 주세요.
        '401':
          description: 토큰 검증 실패로 인한 회원탈퇴 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 로그인이 필요한 요청입니다.
      security:
      - bearerAuth: []
  "/api/logout":
    post:
      tags:
      - User-auth
      summary: 로그아웃
      operationId: logout
      parameters:
      - name: access_token
        in: cookie
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
      security:
      - bearerAuth: []
  "/api/login":
    post:
      tags:
      - User-auth
      description: 로그인 (jwt 토큰 발급), 회원탈퇴 철회
      operationId: logIn
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LogInRequest"
        required: true
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: "[닉네임] 님, 반갑습니다. ☺️ "
        '400':
          description: 로그인 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 아이디 또는 비밀번호가 일치하지 않습니다. / 회원탈퇴 철회 기간이 지나 복구가 불가합니다.
  "/api/files":
    post:
      tags:
      - File
      summary: 게시글에 파일 등록 (1건씩 등록)
      description: 게시글을 생성하면서 파일을 등록할 시, draftId 필수. 게시글 등록 단계 때 draft Id와 매핑되어 file이
        boardId를 갖게 된다.
      operationId: uploadFile
      parameters:
      - name: boardId
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: draftId
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: 파일 등록 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FileResponse"
        '400':
          description: 파일 등록 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 블랙리스트 확장자- 해당 파일은 업로드할 수 없습니다. / draftId 미입력 (임시 파일 상태)-
                    파일 업로드에 필요한 값이 없습니다.
        '404':
          description: 게시글 수정 중 파일 등록 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 존재하지 않는 게시글입니다.
        '500':
          description: 서버 문제로 파일 등록 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 파일 업로드 실패
  "/api/categories":
    post:
      tags:
      - Category
      summary: 카테고리 등록
      operationId: newCategory
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CategoryRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
  "/api/boards":
    post:
      tags:
      - Board
      summary: 게시글 등록
      description: 임시 파일 매핑을 위한 draftId 필수
      operationId: createBoard
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BoardCreateRequest"
        required: true
      responses:
        '200':
          description: 게시글 등록 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BoardDetailResponse"
        '400':
          description: 게시글 등록 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: draftId 미입력- 게시글 고유 값이 없습니다.
        '404':
          description: 없는 카테고리 입력으로 인한 게시글 등록 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 존재하지 않는 카테고리입니다.
  "/api/timers/{timerId}":
    get:
      tags:
      - Timer
      summary: 타이머 단일 조회 (상세 조회)
      operationId: getTimer
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
        '404':
          description: 조회 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 존재하지 않는 타이머입니다.
    delete:
      tags:
      - Timer
      summary: 타이머 삭제 (타이머 랩 함께 삭제)
      operationId: deleteTimer
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
    patch:
      tags:
      - Timer
      summary: 타이머 수정
      description: 설정된 계획이 완료 상태라면, 타이머 계획 수정 불가
      operationId: updateTimer
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TimerRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/sync":
    patch:
      tags:
      - Timer
      summary: 타이머 수동 동기화
      description: 타이머 경과 시간 갱신, 계획 자동 완료 처리 (sse 알림)
      operationId: syncedTimer
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/start":
    patch:
      tags:
      - Timer
      summary: 타이머 시작
      operationId: startTimer
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/reset":
    patch:
      tags:
      - Timer
      summary: 타이머 초기화
      description: 이미 종료된 타이머거나 계획이 완료된 경우 초기화 불가
      operationId: resetTimer
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/pause":
    patch:
      tags:
      - Timer
      summary: 타이머 정지 (실행 중인 랩 함께 정지)
      operationId: pauseTimer
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/laps/{lapId}":
    delete:
      tags:
      - Lap
      summary: 랩 삭제
      description: 랩 삭제 시, 타이머 전체 기록에 영향 없음
      operationId: deleteLap
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: lapId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
    patch:
      tags:
      - Lap
      summary: 랩 수정
      description: 랩명만 수정 가능
      operationId: updateLap
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: lapId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LapRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/laps/{lapId}/start":
    patch:
      tags:
      - Lap
      summary: 랩 시작
      description: 실행 중인 타이머일 경우에만 랩 실행 가능, 이미 실행 중인 랩 있을 경우 실행 불가, 종료된 랩은 재실행 불가
      operationId: startLap
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: lapId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/laps/{lapId}/pause":
    patch:
      tags:
      - Lap
      summary: 랩 중지
      description: 종료된 랩이거나 실행 중인 랩이 아니면 중지 불가
      operationId: pauseLap
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: lapId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/laps/{lapId}/end":
    patch:
      tags:
      - Lap
      summary: 랩 종료
      description: 이미 종료된 랩이거나 실행 중인 랩이 아니면 종료 불가
      operationId: endLap
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: lapId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/timers/{timerId}/end":
    patch:
      tags:
      - Timer
      summary: 타이머 종료 (타이머에 포함된 모든 랩 함께 종료)
      operationId: endTimer
      parameters:
      - name: timerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TimerDetailResponse"
  "/api/plans/{planId}":
    get:
      tags:
      - Plan
      summary: 계획 단일 조회
      operationId: getPlan
      parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlanResponse"
        '404':
          description: 조회 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 존재하지 않는 계획입니다.
    delete:
      tags:
      - Plan
      summary: 계획 삭제
      operationId: deletePlan
      parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
    patch:
      tags:
      - Plan
      summary: 계획 수정
      operationId: updatePlan
      parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PlanRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
  "/api/plans/{planId}/status":
    patch:
      tags:
      - Plan
      summary: 계획 상태 수정
      operationId: setPlanStatus
      parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
  "/api/notifications/{id}/read":
    patch:
      tags:
      - Notification
      operationId: readNoti
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
  "/api/notifications/read-all":
    patch:
      tags:
      - Notification
      operationId: readAllNoti
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
  "/api/member/change-resolution":
    patch:
      tags:
      - User
      operationId: updateResolution
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateResolutionReqeust"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/member/change-pw":
    patch:
      tags:
      - User
      summary: 비밀번호 변경
      operationId: updatePW
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatePwRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
      security:
      - bearerAuth: []
  "/api/member/change-nickname":
    patch:
      tags:
      - User
      summary: 닉네임 변경
      operationId: updateNickname
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateNicknameRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
      security:
      - bearerAuth: []
  "/api/categories/{categoryId}":
    get:
      tags:
      - Category
      summary: 카테고리 단일 조회
      operationId: getCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CategoryResponse"
        '404':
          description: 조회 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 존재하지 않는 카테고리입니다.
    delete:
      tags:
      - Category
      summary: 카테고리 삭제
      operationId: delCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 삭제 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: 카테고리가 삭제되었습니다.
        '400':
          description: "[기타] 카테고리 삭제 시도로 인한 삭제 실패"
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 해당 카테고리는 삭제할 수 없습니다.
        '404':
          description: 삭제 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 존재하지 않는 카테고리입니다.
    patch:
      tags:
      - Category
      summary: 카테고리 수정
      operationId: updateCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CategoryRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
  "/api/boards/{boardId}":
    get:
      tags:
      - Board
      summary: 게시글 단일 조회 (파일 목록 포함)
      operationId: getBoards
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BoardDetailResponse"
        '404':
          description: 조회 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 존재하지 않는 게시글입니다.
    delete:
      tags:
      - Board
      summary: 게시글 삭제 (해당 게시글의 파일 함께 삭제)
      operationId: deleteBoard
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
    patch:
      tags:
      - Board
      summary: 게시글 수정
      operationId: updateBoard
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BoardUpdateRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/BoardDetailResponse"
  "/api/timers/search":
    get:
      tags:
      - Timer
      summary: 타이머 목록 조회 (리스트)
      description: '정렬(sort) 기본 값: 생성일 내림차순 + 카테고리명/타이머명 오름차순'
      operationId: searchTimer
      parameters:
      - name: startDate
        in: query
        required: false
        schema:
          type: string
          format: date
      - name: endDate
        in: query
        required: false
        schema:
          type: string
          format: date
      - name: category
        in: query
        required: false
        schema:
          type: string
      - name: plan
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: keyword
        in: query
        required: false
        schema:
          type: string
      - name: status
        in: query
        required: false
        schema:
          type: string
      - name: sort
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TimerResponse"
  "/api/sse/subscribe":
    get:
      tags:
      - SSE
      summary: SSE 구독
      operationId: subscribe
      responses:
        '200':
          description: OK
          content:
            text/event-stream:
              schema:
                "$ref": "#/components/schemas/SseEmitter"
  "/api/sse/subscribe/status":
    get:
      tags:
      - SSE
      summary: 로그인한 유저가 SSE 구독 중인지 조회
      operationId: isSubscribe
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: 구독된 알림 채널이 없습니다.
  "/api/signin/check-info":
    get:
      tags:
      - User
      summary: 아이디, 닉네임 중복 확인
      operationId: check
      parameters:
      - name: id
        in: query
        required: false
        schema:
          type: string
      - name: nickname
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
  "/api/plans/search":
    get:
      tags:
      - Plan
      summary: 계획 목록 조회 (범위 조회 시, 메시지 포함)
      description: '정렬(sort) 기본 값: 시작일자/카테고리명 오름차순'
      operationId: searchPlans
      parameters:
      - name: range
        in: query
        required: false
        schema:
          type: string
      - name: startDate
        in: query
        required: false
        schema:
          type: string
          format: date
      - name: endDate
        in: query
        required: false
        schema:
          type: string
          format: date
      - name: category
        in: query
        required: false
        schema:
          type: string
      - name: keyword
        in: query
        required: false
        schema:
          type: string
      - name: status
        in: query
        required: false
        schema:
          type: string
      - name: sort
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PlanDetailResponse"
  "/api/notifications":
    get:
      tags:
      - Notification
      operationId: getAllNoti
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/NotificationResponse"
  "/api/notifications/unread-count":
    get:
      tags:
      - Notification
      operationId: getUnreadCount
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int64
  "/api/main/":
    get:
      tags:
      - Main
      summary: 메인페이지 계획, 주간 리포트 조회
      operationId: getMain
      responses:
        '200':
          description: 계획 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MainResponse"
              examples:
                MainResponse 예시:
                  summary: 성공 응답 예시
                  description: MainResponse 예시
                  value:
                    nickname: 테스트 유저
                    resolution: 오늘도 파이팅!
                    todayPlans:
                      planList:
                      - planId: 8
                        name: 테스트
                        memo: ''
                        categoryName: 공부
                        startDate: '2025-08-02'
                        endDate: '2025-08-07'
                        minutes: 10
                        status: false
                      - planId: 10
                        name: 테스트
                        memo: ''
                        categoryName: 공부
                        startDate: '2025-08-06'
                        endDate: '2025-08-07'
                        minutes: 10
                        status: false
                      achievedPlan: 0
                      totalPlan: 2
                      rate: 0.0%
                      message: "아직 달성한 계획이 없어요. 시작해 볼까요? \U0001F60E"
                      totalStudyTime: 00:05:22 (당일 날짜에 걸친 계획 + 타이머의 경과 시간)
                    weeklyPlans:
                      planList:
                      - planId: 8
                        name: 테스트
                        memo: ''
                        categoryName: 공부
                        startDate: '2025-08-02'
                        endDate: '2025-08-07'
                        minutes: 10
                        status: false
                      - planId: 9
                        name: 삭제 테스트
                        memo: 
                        categoryName: 공부
                        startDate: '2025-08-05'
                        endDate: '2025-08-05'
                        minutes: 20
                        status: true
                      - planId: 10
                        name: 테스트
                        memo: ''
                        categoryName: 공부
                        startDate: '2025-08-06'
                        endDate: '2025-08-07'
                        minutes: 10
                        status: false
                      achievedPlan: 1
                      totalPlan: 3
                      rate: 33.4%
                      message: "천천히 쌓아가는 중이에요. 남은 기간 동안 더 쌓아봐요! \U0001F3C3"
                      totalStudyTime: 14:41:22 (주중 전체 공부 시간 *타이머 경과 시간 포함)
        '401':
          description: 조회 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 로그인이 필요한 요청입니다.
  "/api/main":
    get:
      tags:
      - Main
      summary: 메인페이지 계획, 주간 리포트 조회
      operationId: getMain_1
      responses:
        '200':
          description: 계획 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MainResponse"
              examples:
                MainResponse 예시:
                  summary: 성공 응답 예시
                  description: MainResponse 예시
                  value:
                    nickname: 테스트 유저
                    resolution: 오늘도 파이팅!
                    todayPlans:
                      planList:
                      - planId: 8
                        name: 테스트
                        memo: ''
                        categoryName: 공부
                        startDate: '2025-08-02'
                        endDate: '2025-08-07'
                        minutes: 10
                        status: false
                      - planId: 10
                        name: 테스트
                        memo: ''
                        categoryName: 공부
                        startDate: '2025-08-06'
                        endDate: '2025-08-07'
                        minutes: 10
                        status: false
                      achievedPlan: 0
                      totalPlan: 2
                      rate: 0.0%
                      message: "아직 달성한 계획이 없어요. 시작해 볼까요? \U0001F60E"
                      totalStudyTime: 00:05:22 (당일 날짜에 걸친 계획 + 타이머의 경과 시간)
                    weeklyPlans:
                      planList:
                      - planId: 8
                        name: 테스트
                        memo: ''
                        categoryName: 공부
                        startDate: '2025-08-02'
                        endDate: '2025-08-07'
                        minutes: 10
                        status: false
                      - planId: 9
                        name: 삭제 테스트
                        memo: 
                        categoryName: 공부
                        startDate: '2025-08-05'
                        endDate: '2025-08-05'
                        minutes: 20
                        status: true
                      - planId: 10
                        name: 테스트
                        memo: ''
                        categoryName: 공부
                        startDate: '2025-08-06'
                        endDate: '2025-08-07'
                        minutes: 10
                        status: false
                      achievedPlan: 1
                      totalPlan: 3
                      rate: 33.4%
                      message: "천천히 쌓아가는 중이에요. 남은 기간 동안 더 쌓아봐요! \U0001F3C3"
                      totalStudyTime: 14:41:22 (주중 전체 공부 시간 *타이머 경과 시간 포함)
        '401':
          description: 조회 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 로그인이 필요한 요청입니다.
  "/api/files/{fileId}":
    get:
      tags:
      - File
      summary: front에 파일 띄우기
      operationId: viewFile
      parameters:
      - name: fileId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
                format: binary
    delete:
      tags:
      - File
      summary: 파일 삭제
      description: 삭제할 파일 id와 파일이 있는 게시글 id가 일치해야 하며, 임시 파일이라면 파일의 draft id와 일치해야
        한다.
      operationId: deleteFile
      parameters:
      - name: fileId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: boardId
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: draftId
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: 파일 삭제 성공
          content:
            application/json:
              schema:
                type: string
                example:
                  success: true
                  message: 파일이 삭제되었습니다.
        '400':
          description: 파일 삭제 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 게시글 id 미입력- 삭제할 파일의 게시글을 입력해 주세요. / 파일이 등록된 게시글과 일치하지 않습니다.
                    / draftId 미입력 (임시 파일 상태)- 파일 삭제에 필요한 값이 없습니다. / draftId 일치 X-
                    파일 삭제에 필요한 값이 일치하지 않습니다.
        '404':
          description: 게시글 수정 중 파일 등록 실패
          content:
            application/json:
              schema:
                type: string
                example:
                  success: false
                  message: 존재하지 않는 게시글입니다.
  "/api/categories/search":
    get:
      tags:
      - Category
      summary: 카테고리 목록 조회 (리스트)
      description: '정렬 (sort) 기본값: 카테고리명 오름차순'
      operationId: searchCategories
      parameters:
      - name: keyword
        in: query
        required: false
        schema:
          type: string
      - name: sort
        in: query
        required: false
        schema:
          type: string
          default: asc
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CategoryResponse"
  "/api/boards/search":
    get:
      tags:
      - Board
      summary: 게시글 목록 조회 (리스트 형태)
      description: '정렬(sort) 기본 값: 게시글명/카테고리명 오름차순'
      operationId: searchBoards
      parameters:
      - name: category
        in: query
        required: false
        schema:
          type: string
      - name: keyword
        in: query
        required: false
        schema:
          type: string
      - name: sort
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BoardResponse"
  "/api/notifications/{id}":
    delete:
      tags:
      - Notification
      operationId: deleteNoti
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
  "/api/notifications/":
    delete:
      tags:
      - Notification
      operationId: deleteAllNoti
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommonResponse"
components:
  schemas:
    TimerRequest:
      required:
      - category
      - name
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 0
          type: string
          description: 타이머명 (20자 이내)
        plan:
          type: integer
          description: 플랜 id *선택
          format: int64
        category:
          type: integer
          description: 카테고리 id *필수, 플랜 선택 시 플랜의 카테고리와 일치해야 함.
          format: int64
      description: 타이머 등록/수정 request
    LapResponse:
      type: object
      properties:
        id:
          type: integer
          description: 랩 id
          format: int64
          example: 6
        timerId:
          type: integer
          description: 타이머 id
          format: int64
          example: 1
        lapName:
          type: string
          description: 랩명
          example: 랩 테스트
        createDate:
          type: string
          description: 랩 생성일
          example: '2025-07-12'
        startAt:
          type: string
          description: 랩 시작일자
          example: '2025-07-12 21:10:17'
        pauseAt:
          type: string
          description: 랩 정지일자
          format: date-time
        endAt:
          type: string
          description: 랩 종료일자
          example: '2025-07-12 21:12:00'
        elapsed:
          type: integer
          description: 랩 경과시간
          format: int64
          example: 103
        status:
          type: string
          description: 랩 상태
          example: ENDED
          enum:
          - READY
          - RUNNING
          - PAUSED
          - ENDED
    TimerDetailResponse:
      type: object
      properties:
        timerId:
          type: integer
          description: 타이머 id
          format: int64
          example: 1
        timerName:
          type: string
          description: 타이머명
          example: 테스트
        planId:
          type: integer
          description: 계획 id
          format: int64
          example: 5
        planName:
          type: string
          description: 계획명
          example: 공부 계획
        planStartDate:
          type: string
          description: 계획 시작일자
          format: date
          example: '2025-07-12'
        planEndDate:
          type: string
          description: 계획 종료일자
          format: date
          example: '2025-07-12'
        planStatus:
          type: boolean
          description: 계획 완료여부
          example: true
        categoryName:
          type: string
          description: 카테고리명
          example: 공부
        createDate:
          type: string
          description: 타이머 생성일자
          format: date
          example: '2025-07-12'
        startAt:
          type: string
          description: 타이머 시작일자
          example: '2025-07-12 21:00:00'
        endAt:
          type: string
          description: 타이머 종료일자
          format: date-time
        pauseAt:
          type: string
          description: 타이머 정지일자
          example: '2025-07-12 21:20:00'
        elapsed:
          type: integer
          description: 타이머 경과시간
          format: int64
          example: 1200
        status:
          type: string
          description: 타이머 상태
          example: PAUSED
          enum:
          - READY
          - RUNNING
          - PAUSED
          - ENDED
        laps:
          type: array
          items:
            "$ref": "#/components/schemas/LapResponse"
    LapRequest:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 0
          type: string
          description: 랩명 (20자 이내)
      description: 랩 등록/수정 request
    SignInRequest:
      required:
      - email
      - id
      - nickname
      - pw
      type: object
      properties:
        id:
          pattern: "^[a-zA-Z0-9]{4,12}$"
          type: string
          description: 유저 id (영문 및 숫자, 4~12자 이내)
        pw:
          pattern: "^[a-zA-Z0-9]{6,20}$"
          type: string
          description: 유저 pw (영문 및 숫자, 6~20자 이내)
        nickname:
          pattern: "^[가-힣a-zA-Z0-9]{2,10}$"
          type: string
          description: 유저 닉네임 (특수 문자 X, 2~10자 이내)
        email:
          type: string
          description: 유저 이메일
      description: 회원가입 reqeust
    MailRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
        code:
          type: string
          description: 이메일 인증 코드 입력 (인증 코드 발송 시 필요 X)
      description: 이메일 발송/인증 request
    PlanRequest:
      required:
      - categoryId
      - endDate
      - minutes
      - name
      - startDate
      type: object
      properties:
        name:
          maxLength: 30
          minLength: 0
          type: string
          description: 계획명 (30자 이내)
        memo:
          type: string
          description: 계획 메모
        categoryId:
          type: integer
          description: 카테고리 id *필수
          format: int64
        startDate:
          type: string
          description: 계획 시작 날짜
          format: date
        endDate:
          type: string
          description: 계획 종료 날짜
          format: date
        minutes:
          type: integer
          description: 계획 목표 시간 (분 단위)
          format: int32
      description: 계획 수정/등록 request
    CommonResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      description: API Response
    LogInRequest:
      type: object
      properties:
        id:
          pattern: "^[a-zA-Z0-9]{4,12}$"
          type: string
          description: 유저 id (영문 및 숫자, 4~12자 이내)
        pw:
          pattern: "^[a-zA-Z0-9]{6,20}$"
          type: string
          description: 유저 pw (영문 및 숫자, 6~20자 이내)
      description: 로그인 request
    FileResponse:
      type: object
      properties:
        id:
          type: integer
          description: 파일 id
          format: int64
          example: 1
        fileName:
          type: string
          description: 파일명
          example: 명세.png
        fileSize:
          type: string
          description: 파일 크기
          example: 652KB
        url:
          type: string
          description: 파일 경로
          example: "/files/1"
      description: 게시글 파일 목록
    CategoryRequest:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 10
          minLength: 0
          pattern: "^[a-zA-Z0-9가-힣 ]+$"
          type: string
          description: 카테고리명 (특수 문자 입력 X, 10자 이내)
      description: 카테고리 등록/수정 request
    BoardCreateRequest:
      required:
      - categoryId
      - title
      type: object
      properties:
        categoryId:
          type: integer
          description: 카테고리 id *필수
          format: int64
        title:
          maxLength: 30
          minLength: 0
          type: string
          description: 게시글 제목 (30자 이내)
        content:
          type: string
          description: 게시글 내용
        draftId:
          type: string
          description: 프론트에서 생성된 게시글 임시 식별자 (UUID 형식으로 파일 등록 시 활용됨)
      description: 게시글 생성 request
    BoardDetailResponse:
      type: object
      properties:
        board:
          "$ref": "#/components/schemas/BoardResponse"
        files:
          type: array
          description: 게시글 파일 목록
          items:
            "$ref": "#/components/schemas/FileResponse"
    BoardResponse:
      type: object
      properties:
        id:
          type: integer
          description: 게시글 id
          format: int64
          example: 1
        categoryName:
          type: string
          description: 카테고리명
          example: 기타
        title:
          type: string
          description: 게시글명
          example: swagger 공부
        content:
          type: string
          description: 게시글 내용
          example: swagger는 API 설계와 문서화에 좋은 도구입니다.
        uploadAt:
          type: string
          description: 게시글 작성일
          example: '2025-07-18 15:37:07'
        updateAt:
          type: string
          description: 게시글 수정일
          example: '2025-07-18 15:47:00'
    UpdateResolutionReqeust:
      type: object
      properties:
        resolution:
          maxLength: 30
          minLength: 0
          type: string
      description: 다짐 설정 request (30자 이내)
    UpdatePwRequest:
      required:
      - currentPw
      - newPw
      type: object
      properties:
        currentPw:
          type: string
        newPw:
          pattern: "^[a-zA-Z0-9]{6,20}$"
          type: string
      description: 비밀번호 변경 request (영문 및 숫자, 6~20자 이내)
    UpdateNicknameRequest:
      type: object
      properties:
        nickname:
          pattern: "^[가-힣a-zA-Z0-9]{2,10}$"
          type: string
      description: 닉네임 변경 request (특수 문자 X, 2~10자 이내)
    BoardUpdateRequest:
      required:
      - categoryId
      - title
      type: object
      properties:
        categoryId:
          type: integer
          description: 카테고리 id *필수
          format: int64
        title:
          maxLength: 30
          minLength: 0
          type: string
          description: 게시글 제목 (30자 이내)
        content:
          type: string
          description: 게시글 내용
      description: 게시글 수정 request (변경 안 된 내용은 기존 값으로 채워짐)
    TimerResponse:
      type: object
      properties:
        timerId:
          type: integer
          description: 타이머 id
          format: int64
          example: 1
        timerName:
          type: string
          description: 타이머명
          example: 테스트
        planName:
          type: string
          description: 플랜명
          example: 공부 계획
        categoryName:
          type: string
          description: 카테고리명
          example: 공부
        createDate:
          type: string
          description: 타이머 생성일자
          format: date
          example: '2025-07-12'
        elapsed:
          type: integer
          description: 타이머 경과시간
          format: int64
          example: 1200
        status:
          type: string
          description: 타이머 상태
          example: PAUSED
          enum:
          - READY
          - RUNNING
          - PAUSED
          - ENDED
    SseEmitter:
      type: object
      properties:
        timeout:
          type: integer
          format: int64
    PlanResponse:
      type: object
      properties:
        planId:
          type: integer
          description: 계획 id
          format: int64
          example: 5
        name:
          type: string
          description: 계획명
          example: 공부 계획
        memo:
          type: string
          description: 계획 메모
          example: 챕터 5까지 풀기
        categoryName:
          type: string
          description: 카테고리명
          example: 공부
        startDate:
          type: string
          description: 계획 시작일자
          format: date
          example: '2025-07-12'
        endDate:
          type: string
          description: 계획 종료일자
          format: date
          example: '2025-07-12'
        minutes:
          type: integer
          description: 계획 목표 시간
          format: int32
          example: 10
        status:
          type: boolean
          description: " 완료여부"
          example: true
    PlanDetailResponse:
      type: object
      properties:
        planList:
          type: array
          items:
            "$ref": "#/components/schemas/PlanResponse"
        achievedPlan:
          type: integer
          description: 달성 계획 개수
          format: int64
          example: 1
        totalPlan:
          type: integer
          description: 전체 계획 개수
          format: int64
          example: 2
        rate:
          type: string
          description: 달성률
          example: 50.0%
        message:
          type: string
          description: 메시지
          example: "계획의 반을 완료했어요! 잘하고 있어요 \U0001F44F"
        totalStudyTime:
          type: string
          description: 총 공부 시간
          example: '00:50:00'
    NotificationResponse:
      type: object
      properties:
        notificationId:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        alertDate:
          type: string
          format: date-time
        url:
          type: string
        read:
          type: boolean
    MainResponse:
      type: object
      properties:
        nickname:
          type: string
        resolution:
          type: string
        todayPlans:
          "$ref": "#/components/schemas/PlanDetailResponse"
        weeklyPlans:
          "$ref": "#/components/schemas/PlanDetailResponse"
    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          description: 카테고리 id
          format: int64
          example: 1
        name:
          type: string
          description: 카테고리명
          example: 공부
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
